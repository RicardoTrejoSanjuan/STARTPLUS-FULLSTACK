/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, ElementRef, Renderer } from '@angular/core';
import { DIRECTIONS } from '../misc/picker-directions';
import { Subject } from 'rxjs';
import { takeUntil, debounceTime } from 'rxjs/operators';
export class EmojiPickerComponent {
    /**
     * @param {?} _renderer
     * @param {?} _el
     */
    constructor(_renderer, _el) {
        this._renderer = _renderer;
        this._el = _el;
        this.selectionEmitter = new EventEmitter();
        this.pickerCloseEmitter = new EventEmitter();
        this._windowResize = new Subject();
        this._destroyed = new Subject();
        this._windowResize
            .pipe(takeUntil(this._destroyed), debounceTime(100))
            .subscribe(event => {
            this.setPosition(this._currentTarget, this._currentDirection);
        });
    }
    /**
     * @param {?} target
     * @param {?=} directionCode
     * @return {?}
     */
    setPosition(target, directionCode = DIRECTIONS.bottom) {
        if (!target) {
            return console.error('Emoji-Picker: positioning failed due to missing target element or direction code');
        }
        this._renderer.setElementStyle(this._el.nativeElement, 'transform', '');
        /** Store anchor and direction */
        this._currentTarget = target;
        this._currentDirection = directionCode;
        /** @type {?} */
        const targetBorders = target.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const thisBorders = this._el.nativeElement.getBoundingClientRect();
        /** @type {?} */
        let heightCorrection = 0;
        /** @type {?} */
        let widthCorrection = 0;
        /** Setting up centering of picker for all cases */
        switch (this._currentDirection) {
            case DIRECTIONS.top:
            case DIRECTIONS.bottom:
                widthCorrection = targetBorders.left - thisBorders.left + (targetBorders.width - thisBorders.width) / 2;
                break;
            case DIRECTIONS.left:
            case DIRECTIONS.right:
                heightCorrection = targetBorders.top - thisBorders.top + (targetBorders.height - thisBorders.height) / 2;
                break;
        }
        /** Setting up relative positioning for all cases */
        switch (this._currentDirection) {
            case DIRECTIONS.top:
                heightCorrection = targetBorders.top - thisBorders.bottom;
                break;
            case DIRECTIONS.left:
                widthCorrection = targetBorders.left - thisBorders.right;
                break;
            case DIRECTIONS.right:
                widthCorrection = targetBorders.right - thisBorders.left;
                break;
            case DIRECTIONS.bottom:
                heightCorrection = targetBorders.bottom - thisBorders.top;
                break;
        }
        /** Correcting positioning due to overflow problems */
        if (thisBorders.bottom + heightCorrection > window.innerHeight) {
            heightCorrection += window.innerHeight - (thisBorders.bottom + heightCorrection);
        }
        if (thisBorders.top + heightCorrection < 0) {
            heightCorrection -= (thisBorders.top + heightCorrection);
        }
        if (thisBorders.right + widthCorrection > window.innerWidth) {
            widthCorrection += window.innerWidth - (thisBorders.right + widthCorrection);
        }
        if (thisBorders.left + widthCorrection < 0) {
            widthCorrection -= (thisBorders.left + widthCorrection);
        }
        /** set the position adjustments to the emoji picker element */
        this._renderer.setElementStyle(this._el.nativeElement, 'transform', `translate(${widthCorrection}px,${heightCorrection}px)`);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBackground(event) {
        /** internal mousedowns are ignored */
        if (event === this._lastHostMousedownEvent || event.emojiPickerExempt) {
            return;
        }
        this.pickerCloseEmitter.emit(event);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next(true);
    }
}
EmojiPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'emoji-picker',
                template: `
  <emoji-content (emoji-selection)="selectionEmitter.emit($event)"></emoji-content>
  `,
                host: {
                    '(document:click)': 'onBackground($event)',
                    '(click)': '_lastHostMousedownEvent = $event',
                    '(window:resize)': '_windowResize.next($event)'
                },
                styles: [':host { position: absolute; z-index: 9999; }']
            }] }
];
/** @nocollapse */
EmojiPickerComponent.ctorParameters = () => [
    { type: Renderer },
    { type: ElementRef }
];
EmojiPickerComponent.propDecorators = {
    selectionEmitter: [{ type: Output, args: ['emoji-select',] }],
    pickerCloseEmitter: [{ type: Output, args: ['picker-close',] }]
};
if (false) {
    /** @type {?} */
    EmojiPickerComponent.prototype.selectionEmitter;
    /** @type {?} */
    EmojiPickerComponent.prototype.pickerCloseEmitter;
    /** @type {?} */
    EmojiPickerComponent.prototype._lastHostMousedownEvent;
    /** @type {?} */
    EmojiPickerComponent.prototype._currentTarget;
    /** @type {?} */
    EmojiPickerComponent.prototype._currentDirection;
    /** @type {?} */
    EmojiPickerComponent.prototype._windowResize;
    /** @type {?} */
    EmojiPickerComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerComponent.prototype._el;
}
//# sourceMappingURL=data:application/json;base64,