/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ComponentFactoryResolver, ViewContainerRef, ElementRef, EventEmitter, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, distinctUntilChanged } from 'rxjs/operators';
import { EmojiPickerComponent } from '../components/emoji-picker.component';
import { DIRECTIONS } from '../misc/picker-directions';
import { EmojiEvent } from '../misc/emoji-event';
export class EmojiPickerApiDirective {
    /**
     * @param {?} _cfr
     * @param {?} _vcr
     * @param {?} _el
     */
    constructor(_cfr, _vcr, _el) {
        this._cfr = _cfr;
        this._vcr = _vcr;
        this._el = _el;
        this._directionCode = DIRECTIONS.bottom;
        this._searchBar = false;
        this.emojiPickerIfEmitter = new EventEmitter();
        this.selectEmitter = new EventEmitter();
        this._emojiPickerOpenState = new Subject();
        this._destroyed = new Subject();
        this._emojiSubs = [];
        this._emojiPickerOpenState
            .pipe(takeUntil(this._destroyed), distinctUntilChanged())
            .subscribe(value => {
            if (value) {
                this.openPicker();
            }
            else {
                this.closePicker();
            }
        });
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    set emojiPickerDirection(direction) {
        if (DIRECTIONS[direction] === undefined) {
            console.error(`Emoji-Picker: direction '${direction}' passed as input does not exist in DIRECTIONS table, defaulting to 'bottom'`);
            this._directionCode = DIRECTIONS.bottom;
        }
        else {
            this._directionCode = DIRECTIONS[direction];
        }
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    set emojiPickerIf(condition) {
        this._emojiPickerOpenState.next(condition);
    }
    /**
     * @return {?}
     */
    openPicker() {
        this._emojiPickerFactory = this._emojiPickerFactory || this._cfr.resolveComponentFactory(EmojiPickerComponent);
        this._emojiPickerRef = this._emojiPickerRef || this._vcr.createComponent(this._emojiPickerFactory);
        this._emojiPickerRef.instance.setPosition(this._el, this._directionCode);
        this._emojiSubs.push(this._emojiPickerRef.instance.pickerCloseEmitter.subscribe(event => this.emojiPickerIfEmitter.emit(false)), this._emojiPickerRef.instance.selectionEmitter.subscribe(event => this.selectEmitter.emit(EmojiEvent.fromArray(event))));
    }
    /**
     * @return {?}
     */
    closePicker() {
        if (!this._emojiPickerRef || !this._emojiPickerRef.destroy) {
            return;
        }
        this._emojiSubs.forEach((subscription) => subscription.unsubscribe());
        this._emojiPickerRef.destroy();
        this._emojiSubs = [];
        delete this._emojiPickerRef;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next(true);
    }
}
EmojiPickerApiDirective.decorators = [
    { type: Directive, args: [{
                selector: '[emojiPickerIf]',
                host: {
                    '(click)': '$event.emojiPickerExempt = true' // marking off event listening on anchor
                }
            },] }
];
/** @nocollapse */
EmojiPickerApiDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ElementRef }
];
EmojiPickerApiDirective.propDecorators = {
    emojiPickerDirection: [{ type: Input, args: ['emojiPickerDirection',] }],
    emojiPickerIf: [{ type: Input, args: ['emojiPickerIf',] }],
    emojiPickerIfEmitter: [{ type: Output, args: ['emojiPickerIfChange',] }],
    selectEmitter: [{ type: Output, args: ['emojiPickerSelect',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._directionCode;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._searchBar;
    /** @type {?} */
    EmojiPickerApiDirective.prototype.emojiPickerIfEmitter;
    /** @type {?} */
    EmojiPickerApiDirective.prototype.selectEmitter;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._emojiPickerOpenState;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._emojiPickerFactory;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._emojiPickerRef;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._emojiSubs;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._cfr;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._vcr;
    /**
     * @type {?}
     * @private
     */
    EmojiPickerApiDirective.prototype._el;
}
//# sourceMappingURL=data:application/json;base64,