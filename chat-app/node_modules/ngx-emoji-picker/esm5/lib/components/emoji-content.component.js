/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, forwardRef, Output, EventEmitter } from '@angular/core';
import { EMOJIS } from '../misc/emojis.data';
import { EmojiListComponent } from './emoji-list.component';
var EmojiContentComponent = /** @class */ (function () {
    function EmojiContentComponent() {
        this.emojiSelectionEmitter = new EventEmitter();
        this._emojis = EMOJIS;
        this.emojis = this._emojis.slice();
        this.emojisCategories = this._emojis.map(function (category) { return Object.assign({}, category, { emojis: [] }); });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    EmojiContentComponent.prototype.searchHandler = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var filteredEmojis = this.emojisCategories.map(function (category) { return Object.assign({}, category, { emojis: [] }); });
        value = value.replace(/-/g, '').toLowerCase();
        Object.keys(this._emojis).forEach(function (i) {
            /** @type {?} */
            var category = _this._emojis[i];
            category.emojis.forEach(function (emoji) {
                if (emoji[1].indexOf(value) !== -1) {
                    filteredEmojis[i].emojis.push(emoji);
                }
            });
        });
        this.emojis = filteredEmojis;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    EmojiContentComponent.prototype.categorySelectionHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.emojiListComponent.selectCategory(event);
    };
    EmojiContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'emoji-content',
                    template: "\n  <emoji-header \n    [emojisCategories]=\"emojisCategories\"\n    (categorySelection)=\"categorySelectionHandler($event)\"\n    (search)=\"searchHandler($event)\"></emoji-header>\n  <emoji-list [emojis]=\"emojis\" (emoji-selection)=\"emojiSelectionEmitter.emit($event)\"></emoji-list>\n  <emoji-footer></emoji-footer>\n  ",
                    styles: [":host{display:flex;flex-direction:column;width:100vw;height:314px;border-radius:3px;background:#fff;text-align:left;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}@media (min-width:258px){:host{width:258px}}emoji-list{flex-grow:1}"]
                }] }
    ];
    /** @nocollapse */
    EmojiContentComponent.ctorParameters = function () { return []; };
    EmojiContentComponent.propDecorators = {
        emojiListComponent: [{ type: ViewChild, args: [forwardRef(function () { return EmojiListComponent; }),] }],
        emojiSelectionEmitter: [{ type: Output, args: ['emoji-selection',] }]
    };
    return EmojiContentComponent;
}());
export { EmojiContentComponent };
if (false) {
    /** @type {?} */
    EmojiContentComponent.prototype.emojiListComponent;
    /** @type {?} */
    EmojiContentComponent.prototype.emojiSelectionEmitter;
    /**
     * @type {?}
     * @private
     */
    EmojiContentComponent.prototype._emojis;
    /** @type {?} */
    EmojiContentComponent.prototype.emojis;
    /** @type {?} */
    EmojiContentComponent.prototype.emojisCategories;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vamktY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZW1vamktcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZW1vamktY29udGVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RDtJQXFCRTtRQU4yQiwwQkFBcUIsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRW5FLFlBQU8sR0FBRyxNQUFNLENBQUM7UUFDekIsV0FBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIscUJBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUcsRUFBRSxFQUFFLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQyxDQUFDO0lBRS9FLENBQUM7Ozs7O0lBRWhCLDZDQUFhOzs7O0lBQWIsVUFBYyxLQUFLO1FBQW5CLGlCQWdCQzs7WUFmSyxjQUFjLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRyxFQUFFLEVBQUUsQ0FBQyxFQUE1QyxDQUE0QyxDQUFDO1FBRXhHLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU5QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDOztnQkFDM0IsUUFBUSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRWhDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztnQkFDM0IsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUNsQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDdEM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFRCx3REFBd0I7Ozs7SUFBeEIsVUFBeUIsS0FBSztRQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7O2dCQTNDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBRXpCLFFBQVEsRUFBRSxzVUFPVDs7aUJBQ0Y7Ozs7O3FDQUdFLFNBQVMsU0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLGtCQUFrQixFQUFsQixDQUFrQixDQUFDO3dDQUM5QyxNQUFNLFNBQUMsaUJBQWlCOztJQTZCM0IsNEJBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQS9CWSxxQkFBcUI7OztJQUNoQyxtREFBd0Y7O0lBQ3hGLHNEQUEyRTs7Ozs7SUFFM0Usd0NBQXlCOztJQUN6Qix1Q0FBOEI7O0lBQzlCLGlEQUE4RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBmb3J3YXJkUmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRU1PSklTIH0gZnJvbSAnLi4vbWlzYy9lbW9qaXMuZGF0YSc7XG5pbXBvcnQgeyBFbW9qaUxpc3RDb21wb25lbnQgfSBmcm9tICcuL2Vtb2ppLWxpc3QuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZW1vamktY29udGVudCcsXG4gIHN0eWxlVXJsczogWycuLi9zdHlsZXMvZW1vamktY29udGVudC5zY3NzJ10sXG4gIHRlbXBsYXRlOiBgXG4gIDxlbW9qaS1oZWFkZXIgXG4gICAgW2Vtb2ppc0NhdGVnb3JpZXNdPVwiZW1vamlzQ2F0ZWdvcmllc1wiXG4gICAgKGNhdGVnb3J5U2VsZWN0aW9uKT1cImNhdGVnb3J5U2VsZWN0aW9uSGFuZGxlcigkZXZlbnQpXCJcbiAgICAoc2VhcmNoKT1cInNlYXJjaEhhbmRsZXIoJGV2ZW50KVwiPjwvZW1vamktaGVhZGVyPlxuICA8ZW1vamktbGlzdCBbZW1vamlzXT1cImVtb2ppc1wiIChlbW9qaS1zZWxlY3Rpb24pPVwiZW1vamlTZWxlY3Rpb25FbWl0dGVyLmVtaXQoJGV2ZW50KVwiPjwvZW1vamktbGlzdD5cbiAgPGVtb2ppLWZvb3Rlcj48L2Vtb2ppLWZvb3Rlcj5cbiAgYFxufSlcblxuZXhwb3J0IGNsYXNzIEVtb2ppQ29udGVudENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoZm9yd2FyZFJlZigoKSA9PiBFbW9qaUxpc3RDb21wb25lbnQpKSBlbW9qaUxpc3RDb21wb25lbnQ6IEVtb2ppTGlzdENvbXBvbmVudDtcbiAgQE91dHB1dCgnZW1vamktc2VsZWN0aW9uJykgZW1vamlTZWxlY3Rpb25FbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgcHJpdmF0ZSBfZW1vamlzID0gRU1PSklTO1xuICBlbW9qaXMgPSB0aGlzLl9lbW9qaXMuc2xpY2UoKTtcbiAgZW1vamlzQ2F0ZWdvcmllcyA9IHRoaXMuX2Vtb2ppcy5tYXAoY2F0ZWdvcnkgPT4gT2JqZWN0LmFzc2lnbih7fSwgY2F0ZWdvcnksIHsgZW1vamlzIDogW10gfSkpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBzZWFyY2hIYW5kbGVyKHZhbHVlKSB7XG4gICAgbGV0IGZpbHRlcmVkRW1vamlzID0gdGhpcy5lbW9qaXNDYXRlZ29yaWVzLm1hcChjYXRlZ29yeSA9PiBPYmplY3QuYXNzaWduKHt9LCBjYXRlZ29yeSwgeyBlbW9qaXMgOiBbXSB9KSk7XG4gICAgXG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8tL2csICcnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5fZW1vamlzKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLl9lbW9qaXNbaV07XG5cbiAgICAgIGNhdGVnb3J5LmVtb2ppcy5mb3JFYWNoKGVtb2ppID0+IHtcbiAgICAgICAgaWYgKGVtb2ppWzFdLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgICAgIGZpbHRlcmVkRW1vamlzW2ldLmVtb2ppcy5wdXNoKGVtb2ppKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmVtb2ppcyA9IGZpbHRlcmVkRW1vamlzO1xuICB9XG5cbiAgY2F0ZWdvcnlTZWxlY3Rpb25IYW5kbGVyKGV2ZW50KSB7XG4gICAgdGhpcy5lbW9qaUxpc3RDb21wb25lbnQuc2VsZWN0Q2F0ZWdvcnkoZXZlbnQpO1xuICB9XG59XG4iXX0=