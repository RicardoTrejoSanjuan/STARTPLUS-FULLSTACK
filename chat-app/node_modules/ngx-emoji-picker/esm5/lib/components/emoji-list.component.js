/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChildren, QueryList, forwardRef, Output, EventEmitter } from '@angular/core';
import { EmojiCategoryComponent } from './emoji-category.component';
var EmojiListComponent = /** @class */ (function () {
    function EmojiListComponent() {
        this.emojiSelectionEmitter = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    EmojiListComponent.prototype.selectCategory = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.emojiCategoryComponents.forEach(function (categoryCmp) {
            if (categoryCmp['category'].name === event.name) {
                categoryCmp.scrollIntoView();
            }
        });
    };
    EmojiListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'emoji-list',
                    template: "\n  <div class=\"emoji-list\">\n    <ng-container *ngFor=\"let emojiCategory of emojis | notEmptyEmojiCategory\">\n      <emoji-category [category]=\"emojiCategory\"></emoji-category>\n      <div class=\"emoji-buttons\">\n        <emoji-button \n        *ngFor=\"let emoji of emojiCategory.emojis\"\n        (selection)=\"emojiSelectionEmitter.emit($event)\"\n        [emoji]=\"emoji\"></emoji-button>\n      </div>\n    </ng-container>\n  </div>\n  ",
                    styles: [":host{overflow-y:auto}.emoji-list{padding:0 10px 10px}.emoji-buttons{display:flex;justify-content:center;flex-wrap:wrap;margin:5px 0}"]
                }] }
    ];
    /** @nocollapse */
    EmojiListComponent.ctorParameters = function () { return []; };
    EmojiListComponent.propDecorators = {
        emojiCategoryComponents: [{ type: ViewChildren, args: [forwardRef(function () { return EmojiCategoryComponent; }),] }],
        emojis: [{ type: Input, args: ['emojis',] }],
        emojiSelectionEmitter: [{ type: Output, args: ['emoji-selection',] }]
    };
    return EmojiListComponent;
}());
export { EmojiListComponent };
if (false) {
    /** @type {?} */
    EmojiListComponent.prototype.emojiCategoryComponents;
    /** @type {?} */
    EmojiListComponent.prototype.emojis;
    /** @type {?} */
    EmojiListComponent.prototype.emojiSelectionEmitter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vamktbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZW1vamktcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZW1vamktbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEU7SUF1QkU7UUFGMkIsMEJBQXFCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUUzRCxDQUFDOzs7OztJQUVWLDJDQUFjOzs7O0lBQXJCLFVBQXNCLEtBQUs7UUFDekIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxVQUFDLFdBQWtDO1lBQ3RFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxFQUFFO2dCQUMvQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDOUI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQS9CRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBRXRCLFFBQVEsRUFBRSxvY0FZVDs7aUJBQ0Y7Ozs7OzBDQUdFLFlBQVksU0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLHNCQUFzQixFQUF0QixDQUFzQixDQUFDO3lCQUNyRCxLQUFLLFNBQUMsUUFBUTt3Q0FDZCxNQUFNLFNBQUMsaUJBQWlCOztJQVczQix5QkFBQztDQUFBLEFBaENELElBZ0NDO1NBZFksa0JBQWtCOzs7SUFDN0IscURBQW1IOztJQUNuSCxvQ0FBd0I7O0lBQ3hCLG1EQUEyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZHJlbiwgUXVlcnlMaXN0LCBmb3J3YXJkUmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRW1vamlDYXRlZ29yeUNvbXBvbmVudCB9IGZyb20gJy4vZW1vamktY2F0ZWdvcnkuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZW1vamktbGlzdCcsXG4gIHN0eWxlVXJsczogWycuLi9zdHlsZXMvZW1vamktbGlzdC5zY3NzJ10sXG4gIHRlbXBsYXRlOiBgXG4gIDxkaXYgY2xhc3M9XCJlbW9qaS1saXN0XCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgZW1vamlDYXRlZ29yeSBvZiBlbW9qaXMgfCBub3RFbXB0eUVtb2ppQ2F0ZWdvcnlcIj5cbiAgICAgIDxlbW9qaS1jYXRlZ29yeSBbY2F0ZWdvcnldPVwiZW1vamlDYXRlZ29yeVwiPjwvZW1vamktY2F0ZWdvcnk+XG4gICAgICA8ZGl2IGNsYXNzPVwiZW1vamktYnV0dG9uc1wiPlxuICAgICAgICA8ZW1vamktYnV0dG9uIFxuICAgICAgICAqbmdGb3I9XCJsZXQgZW1vamkgb2YgZW1vamlDYXRlZ29yeS5lbW9qaXNcIlxuICAgICAgICAoc2VsZWN0aW9uKT1cImVtb2ppU2VsZWN0aW9uRW1pdHRlci5lbWl0KCRldmVudClcIlxuICAgICAgICBbZW1vamldPVwiZW1vamlcIj48L2Vtb2ppLWJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cbiAgYFxufSlcblxuZXhwb3J0IGNsYXNzIEVtb2ppTGlzdENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBFbW9qaUNhdGVnb3J5Q29tcG9uZW50KSkgZW1vamlDYXRlZ29yeUNvbXBvbmVudHM6IFF1ZXJ5TGlzdDxFbW9qaUNhdGVnb3J5Q29tcG9uZW50PjtcbiAgQElucHV0KCdlbW9qaXMnKSBlbW9qaXM7XG4gIEBPdXRwdXQoJ2Vtb2ppLXNlbGVjdGlvbicpIGVtb2ppU2VsZWN0aW9uRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljIHNlbGVjdENhdGVnb3J5KGV2ZW50KSB7XG4gICAgdGhpcy5lbW9qaUNhdGVnb3J5Q29tcG9uZW50cy5mb3JFYWNoKChjYXRlZ29yeUNtcDpFbW9qaUNhdGVnb3J5Q29tcG9uZW50KSA9PiB7XG4gICAgICBpZiAoY2F0ZWdvcnlDbXBbJ2NhdGVnb3J5J10ubmFtZSA9PT0gZXZlbnQubmFtZSkge1xuICAgICAgICBjYXRlZ29yeUNtcC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=