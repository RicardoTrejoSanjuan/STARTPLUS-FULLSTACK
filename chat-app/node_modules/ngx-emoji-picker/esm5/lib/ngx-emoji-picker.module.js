/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { EmojiButtonComponent } from './components/emoji-button.component';
import { EmojiCategoriesComponent } from './components/emoji-categories.component';
import { EmojiCategoryComponent } from './components/emoji-category.component';
import { EmojiContentComponent } from './components/emoji-content.component';
import { EmojiFooterComponent } from './components/emoji-footer.component';
import { EmojiHeaderComponent } from './components/emoji-header.component';
import { EmojiListComponent } from './components/emoji-list.component';
import { EmojiSearchComponent } from './components/emoji-search.component';
import { EmojiPickerApiDirective } from './directives/emoji-picker-api.directive';
import { EmojiPickerCaretDirective } from './directives/emoji-picker-caret.directive';
import { EmojiEmptyCategoryPipe } from './pipes/emoji-empty-category.pipe';
import { EmojiPickerComponent } from './components/emoji-picker.component';
var NgxEmojiPickerModule = /** @class */ (function () {
    function NgxEmojiPickerModule() {
    }
    /**
     * @return {?}
     */
    NgxEmojiPickerModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxEmojiPickerModule,
            providers: []
        };
    };
    NgxEmojiPickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        EmojiPickerApiDirective,
                        EmojiPickerCaretDirective,
                        EmojiButtonComponent,
                        EmojiContentComponent,
                        EmojiPickerComponent,
                        EmojiListComponent,
                        EmojiHeaderComponent,
                        EmojiSearchComponent,
                        EmojiCategoriesComponent,
                        EmojiCategoryComponent,
                        EmojiFooterComponent,
                        EmojiEmptyCategoryPipe
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        EmojiPickerApiDirective,
                        EmojiPickerCaretDirective,
                        EmojiButtonComponent,
                        EmojiContentComponent,
                        EmojiPickerComponent,
                        EmojiListComponent,
                        EmojiHeaderComponent,
                        EmojiSearchComponent,
                        EmojiCategoriesComponent,
                        EmojiCategoryComponent,
                        EmojiFooterComponent
                    ],
                    providers: [],
                    entryComponents: [EmojiPickerComponent]
                },] }
    ];
    return NgxEmojiPickerModule;
}());
export { NgxEmojiPickerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVtb2ppLXBpY2tlci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZW1vamktcGlja2VyLyIsInNvdXJjZXMiOlsibGliL25neC1lbW9qaS1waWNrZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDN0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFM0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDdEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHM0U7SUFBQTtJQXlDQyxDQUFDOzs7O0lBTk8sNEJBQU87OztJQUFkO1FBQ0UsT0FBTztZQUNMLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO0lBQ0osQ0FBQzs7Z0JBeENGLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osdUJBQXVCO3dCQUN2Qix5QkFBeUI7d0JBQ3pCLG9CQUFvQjt3QkFDcEIscUJBQXFCO3dCQUNyQixvQkFBb0I7d0JBQ3BCLGtCQUFrQjt3QkFDbEIsb0JBQW9CO3dCQUNwQixvQkFBb0I7d0JBQ3BCLHdCQUF3Qjt3QkFDeEIsc0JBQXNCO3dCQUN0QixvQkFBb0I7d0JBQ3BCLHNCQUFzQjtxQkFDdkI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLFlBQVk7cUJBQ2I7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLHVCQUF1Qjt3QkFDdkIseUJBQXlCO3dCQUN6QixvQkFBb0I7d0JBQ3BCLHFCQUFxQjt3QkFDckIsb0JBQW9CO3dCQUNwQixrQkFBa0I7d0JBQ2xCLG9CQUFvQjt3QkFDcEIsb0JBQW9CO3dCQUNwQix3QkFBd0I7d0JBQ3hCLHNCQUFzQjt3QkFDdEIsb0JBQW9CO3FCQUNyQjtvQkFDRCxTQUFTLEVBQUUsRUFBRTtvQkFDYixlQUFlLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDeEM7O0lBUUEsMkJBQUM7Q0FBQSxBQXpDRixJQXlDRTtTQVBXLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBFbW9qaUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IEVtb2ppQ2F0ZWdvcmllc0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1jYXRlZ29yaWVzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFbW9qaUNhdGVnb3J5Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vtb2ppLWNhdGVnb3J5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFbW9qaUNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZW1vamktY29udGVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRW1vamlGb290ZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZW1vamktZm9vdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFbW9qaUhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1oZWFkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEVtb2ppTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFbW9qaVNlYXJjaENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1zZWFyY2guY29tcG9uZW50JztcblxuaW1wb3J0IHsgRW1vamlQaWNrZXJBcGlEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvZW1vamktcGlja2VyLWFwaS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRW1vamlQaWNrZXJDYXJldERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9lbW9qaS1waWNrZXItY2FyZXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IEVtb2ppRW1wdHlDYXRlZ29yeVBpcGUgfSBmcm9tICcuL3BpcGVzL2Vtb2ppLWVtcHR5LWNhdGVnb3J5LnBpcGUnO1xuaW1wb3J0IHsgRW1vamlQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZW1vamktcGlja2VyLmNvbXBvbmVudCc7XG5cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRW1vamlQaWNrZXJBcGlEaXJlY3RpdmUsXG4gICAgRW1vamlQaWNrZXJDYXJldERpcmVjdGl2ZSxcbiAgICBFbW9qaUJ1dHRvbkNvbXBvbmVudCxcbiAgICBFbW9qaUNvbnRlbnRDb21wb25lbnQsXG4gICAgRW1vamlQaWNrZXJDb21wb25lbnQsXG4gICAgRW1vamlMaXN0Q29tcG9uZW50LFxuICAgIEVtb2ppSGVhZGVyQ29tcG9uZW50LFxuICAgIEVtb2ppU2VhcmNoQ29tcG9uZW50LFxuICAgIEVtb2ppQ2F0ZWdvcmllc0NvbXBvbmVudCxcbiAgICBFbW9qaUNhdGVnb3J5Q29tcG9uZW50LFxuICAgIEVtb2ppRm9vdGVyQ29tcG9uZW50LFxuICAgIEVtb2ppRW1wdHlDYXRlZ29yeVBpcGVcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRW1vamlQaWNrZXJBcGlEaXJlY3RpdmUsXG4gICAgRW1vamlQaWNrZXJDYXJldERpcmVjdGl2ZSxcbiAgICBFbW9qaUJ1dHRvbkNvbXBvbmVudCxcbiAgICBFbW9qaUNvbnRlbnRDb21wb25lbnQsXG4gICAgRW1vamlQaWNrZXJDb21wb25lbnQsXG4gICAgRW1vamlMaXN0Q29tcG9uZW50LFxuICAgIEVtb2ppSGVhZGVyQ29tcG9uZW50LFxuICAgIEVtb2ppU2VhcmNoQ29tcG9uZW50LFxuICAgIEVtb2ppQ2F0ZWdvcmllc0NvbXBvbmVudCxcbiAgICBFbW9qaUNhdGVnb3J5Q29tcG9uZW50LFxuICAgIEVtb2ppRm9vdGVyQ29tcG9uZW50XG4gIF0sXG4gIHByb3ZpZGVyczogW10sXG4gIGVudHJ5Q29tcG9uZW50czogW0Vtb2ppUGlja2VyQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFbW9qaVBpY2tlck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4RW1vamlQaWNrZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtdXG4gICAgfTtcbiAgfVxuIH1cbiJdfQ==