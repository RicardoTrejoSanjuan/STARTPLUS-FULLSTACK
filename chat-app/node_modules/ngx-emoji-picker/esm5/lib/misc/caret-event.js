/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CaretEvent = /** @class */ (function () {
    function CaretEvent(data) {
        Object.assign(this, data);
    }
    /**
     * @return {?}
     */
    CaretEvent.prototype.clone = /**
     * @return {?}
     */
    function () {
        return new CaretEvent(Object.assign({}, this, {
            caretRange: this.caretRange && this.caretRange.cloneRange ? this.caretRange.cloneRange() : this.caretRange
        }));
    };
    /**
     * @return {?}
     */
    CaretEvent.generateNullEvent = /**
     * @return {?}
     */
    function () {
        return new CaretEvent({
            caretOffset: 0,
            textContent: ''
        });
    };
    /**
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    CaretEvent.comparePropsOfObject = /**
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    function (r1, r2) {
        for (var k in r1) {
            if (r1[k] !== r2[k]) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} e1
     * @param {?} e2
     * @return {?}
     */
    CaretEvent.compare = /**
     * @param {?} e1
     * @param {?} e2
     * @return {?}
     */
    function (e1, e2) {
        /** @type {?} */
        var changed = 
        /** different when either caretRange is omitted while other exists */
        (!e1.caretRange && e2.caretRange) ||
            (e1.caretRange && !e2.caretRange) ||
            /** different when offset has changed */
            (e1.caretOffset !== e2.caretOffset) ||
            /** different when textContent has changed */
            (e1.textContent !== e2.textContent) ||
            /** different when range object properties changed */
            !this.comparePropsOfObject(e1.caretRange, e2.caretRange);
        return !changed;
    };
    /**
     * @param {?} win
     * @param {?} doc
     * @param {?} element
     * @return {?}
     */
    CaretEvent.generateCaretEvent = /**
     * @param {?} win
     * @param {?} doc
     * @param {?} element
     * @return {?}
     */
    function (win, doc, element) {
        /** @type {?} */
        var caretOffset = 0;
        /** @type {?} */
        var sel;
        /** @type {?} */
        var caretRange;
        /** @type {?} */
        var textContent = element.textContent;
        if (element.tagName.toLowerCase() === 'input') {
            return new CaretEvent({
                caretOffset: element.selectionEnd,
                textContent: element.value
            });
        }
        if (typeof win.getSelection != "undefined") {
            sel = win.getSelection();
            if (sel.rangeCount > 0) {
                /** @type {?} */
                var range = win.getSelection().getRangeAt(0);
                /** @type {?} */
                var preCaretRange = range.cloneRange();
                preCaretRange.selectNodeContents(element);
                preCaretRange.setEnd(range.endContainer, range.endOffset);
                caretOffset = preCaretRange.toString().length;
                /** Keeping a reference of the range to emit */
                caretRange = range.cloneRange();
            }
        }
        else if ((sel = doc.selection) && sel.type != "Control") {
            /** @type {?} */
            var textRange = sel.createRange();
            /** @type {?} */
            var preCaretTextRange = doc.body.createTextRange();
            preCaretTextRange.moveToElementText(element);
            preCaretTextRange.setEndPoint("EndToEnd", textRange);
            caretOffset = preCaretTextRange.text.length;
            /** Keeping a reference of the range to emit and making it compatible */
            caretRange = textRange.duplicate();
            caretRange.insertNode = function (e) {
                /** @type {?} */
                var container = document.createElement("div");
                container.appendChild(e);
                caretRange.pasteHTML(container.innerHTML);
            };
        }
        return new CaretEvent({
            caretOffset: caretOffset,
            caretRange: caretRange,
            textContent: textContent
        });
    };
    return CaretEvent;
}());
export { CaretEvent };
if (false) {
    /** @type {?} */
    CaretEvent.prototype.caretOffset;
    /** @type {?} */
    CaretEvent.prototype.caretRange;
    /** @type {?} */
    CaretEvent.prototype.textContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZXQtZXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZW1vamktcGlja2VyLyIsInNvdXJjZXMiOlsibGliL21pc2MvY2FyZXQtZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0lBS0Usb0JBQVksSUFBSTtRQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCwwQkFBSzs7O0lBQUw7UUFDRSxPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRTtZQUM1QyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7U0FDM0csQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDOzs7O0lBRU0sNEJBQWlCOzs7SUFBeEI7UUFDRSxPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLFdBQVcsRUFBRSxDQUFDO1lBQ2QsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRU0sK0JBQW9COzs7OztJQUEzQixVQUE0QixFQUFFLEVBQUUsRUFBRTtRQUNoQyxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNoQixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLE9BQU8sS0FBSyxDQUFBO2FBQ2I7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7O0lBRU0sa0JBQU87Ozs7O0lBQWQsVUFBZSxFQUFjLEVBQUUsRUFBYzs7WUFDckMsT0FBTztRQUNYLHFFQUFxRTtRQUNyRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsSUFB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aUNBQW9COztJQUNwQixnQ0FBa0I7O0lBQ2xCLGlDQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDYXJldEV2ZW50IHtcbiAgY2FyZXRPZmZzZXQ6IG51bWJlcjtcbiAgY2FyZXRSYW5nZTogUmFuZ2U7XG4gIHRleHRDb250ZW50OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XG4gIH1cblxuICBjbG9uZSgpOiBDYXJldEV2ZW50IHtcbiAgICByZXR1cm4gbmV3IENhcmV0RXZlbnQoT2JqZWN0LmFzc2lnbih7fSwgdGhpcywge1xuICAgICAgY2FyZXRSYW5nZTogdGhpcy5jYXJldFJhbmdlICYmIHRoaXMuY2FyZXRSYW5nZS5jbG9uZVJhbmdlID8gdGhpcy5jYXJldFJhbmdlLmNsb25lUmFuZ2UoKSA6IHRoaXMuY2FyZXRSYW5nZVxuICAgIH0pKTtcbiAgfVxuXG4gIHN0YXRpYyBnZW5lcmF0ZU51bGxFdmVudCgpIHtcbiAgICByZXR1cm4gbmV3IENhcmV0RXZlbnQoe1xuICAgICAgY2FyZXRPZmZzZXQ6IDAsXG4gICAgICB0ZXh0Q29udGVudDogJydcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBjb21wYXJlUHJvcHNPZk9iamVjdChyMSwgcjIpIHtcbiAgICBmb3IgKGxldCBrIGluIHIxKSB7XG4gICAgICBpZiAocjFba10gIT09IHIyW2tdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBjb21wYXJlKGUxOiBDYXJldEV2ZW50LCBlMjogQ2FyZXRFdmVudCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNoYW5nZWQgPVxuICAgICAgLyoqIGRpZmZlcmVudCB3aGVuIGVpdGhlciBjYXJldFJhbmdlIGlzIG9taXR0ZWQgd2hpbGUgb3RoZXIgZXhpc3RzICovXG4gICAgICAoIWUxLmNhcmV0UmFuZ2UgJiYgZTIuY2FyZXRSYW5nZSkgfHxcbiAgICAgIChlMS5jYXJldFJhbmdlICYmICFlMi5jYXJldFJhbmdlKSB8fFxuICAgICAgLyoqIGRpZmZlcmVudCB3aGVuIG9mZnNldCBoYXMgY2hhbmdlZCAqL1xuICAgICAgKGUxLmNhcmV0T2Zmc2V0ICE9PSBlMi5jYXJldE9mZnNldCkgfHxcbiAgICAgIC8qKiBkaWZmZXJlbnQgd2hlbiB0ZXh0Q29udGVudCBoYXMgY2hhbmdlZCAqL1xuICAgICAgKGUxLnRleHRDb250ZW50ICE9PSBlMi50ZXh0Q29udGVudCkgfHxcbiAgICAgIC8qKiBkaWZmZXJlbnQgd2hlbiByYW5nZSBvYmplY3QgcHJvcGVydGllcyBjaGFuZ2VkICovXG4gICAgICAhdGhpcy5jb21wYXJlUHJvcHNPZk9iamVjdChlMS5jYXJldFJhbmdlLCBlMi5jYXJldFJhbmdlKVxuICAgICAgO1xuXG4gICAgcmV0dXJuICFjaGFuZ2VkO1xuICB9XG5cbiAgc3RhdGljIGdlbmVyYXRlQ2FyZXRFdmVudCh3aW4sIGRvYywgZWxlbWVudDogSFRNTEVsZW1lbnQgJiBIVE1MSW5wdXRFbGVtZW50KTogQ2FyZXRFdmVudCB7XG4gICAgbGV0IGNhcmV0T2Zmc2V0ID0gMCwgc2VsLCBjYXJldFJhbmdlLCB0ZXh0Q29udGVudCA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG5cbiAgICBpZiAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZXRFdmVudCh7XG4gICAgICAgIGNhcmV0T2Zmc2V0OiBlbGVtZW50LnNlbGVjdGlvbkVuZCxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB3aW4uZ2V0U2VsZWN0aW9uICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHNlbCA9IHdpbi5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChzZWwucmFuZ2VDb3VudCA+IDApIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB3aW4uZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgY29uc3QgcHJlQ2FyZXRSYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgcHJlQ2FyZXRSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoZWxlbWVudCk7XG4gICAgICAgIHByZUNhcmV0UmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgY2FyZXRPZmZzZXQgPSBwcmVDYXJldFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuXG4gICAgICAgIC8qKiBLZWVwaW5nIGEgcmVmZXJlbmNlIG9mIHRoZSByYW5nZSB0byBlbWl0ICovXG4gICAgICAgIGNhcmV0UmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoc2VsID0gZG9jLnNlbGVjdGlvbikgJiYgc2VsLnR5cGUgIT0gXCJDb250cm9sXCIpIHtcbiAgICAgIGNvbnN0IHRleHRSYW5nZSA9IHNlbC5jcmVhdGVSYW5nZSgpO1xuICAgICAgY29uc3QgcHJlQ2FyZXRUZXh0UmFuZ2UgPSBkb2MuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgIHByZUNhcmV0VGV4dFJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KGVsZW1lbnQpO1xuICAgICAgcHJlQ2FyZXRUZXh0UmFuZ2Uuc2V0RW5kUG9pbnQoXCJFbmRUb0VuZFwiLCB0ZXh0UmFuZ2UpO1xuICAgICAgY2FyZXRPZmZzZXQgPSBwcmVDYXJldFRleHRSYW5nZS50ZXh0Lmxlbmd0aDtcblxuICAgICAgLyoqIEtlZXBpbmcgYSByZWZlcmVuY2Ugb2YgdGhlIHJhbmdlIHRvIGVtaXQgYW5kIG1ha2luZyBpdCBjb21wYXRpYmxlICovXG4gICAgICBjYXJldFJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgY2FyZXRSYW5nZS5pbnNlcnROb2RlID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGUpO1xuICAgICAgICBjYXJldFJhbmdlLnBhc3RlSFRNTChjb250YWluZXIuaW5uZXJIVE1MKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDYXJldEV2ZW50KHtcbiAgICAgIGNhcmV0T2Zmc2V0LFxuICAgICAgY2FyZXRSYW5nZSxcbiAgICAgIHRleHRDb250ZW50XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==